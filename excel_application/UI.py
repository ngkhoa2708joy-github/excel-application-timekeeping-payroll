import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import os
from datetime import datetime
import re
import json
from email.message import EmailMessage
import base64
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import pickle
import openpyxl
from openpyxl import load_workbook, Workbook

# ================== BI·∫æN TO√ÄN C·ª§C ==================
input_file = ""
allowed_late_evening_staff = {}
allowed_late_morning_staff = {}
output_folder = ""

input_file_tab2 = ""
output_folder_tab2 = ""

allowed_late_morning_staff_T12 = {}
allowed_late_evening_staff_T12 = {}

CA_GAY_FILE_T3 = "ca_gay_T3.json"
CA_GAY_FILE_T12 = "ca_gay_T12.json"

# ============ H√ÄM G·ª¨I MAIL B·∫∞NG GMAIL API ============
SCOPES = ["https://www.googleapis.com/auth/gmail.send"]


def extract_single_sheet(input_path, sheet_name, output_path):
    wb = load_workbook(input_path, data_only=True)
    if sheet_name not in wb.sheetnames:
        raise ValueError(f"Kh√¥ng t√¨m th·∫•y sheet '{sheet_name}' trong file.")

    new_wb = Workbook()
    new_ws = new_wb.active
    new_ws.title = sheet_name
    source_ws = wb[sheet_name]
    for row in source_ws.iter_rows(values_only=True):
        new_ws.append(row)
    new_wb.save(output_path)


def get_gmail_service():
    creds = None
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
            creds = flow.run_local_server(port=0)
        with open("token.pickle", "wb") as token:
            pickle.dump(creds, token)
    service = build("gmail", "v1", credentials=creds)
    return service


def send_email_with_attachment(to, subject, body, attachment_path):
    service = get_gmail_service()
    message = EmailMessage()
    message.set_content(body)
    message["To"] = to
    message["From"] = "me"
    message["Subject"] = subject

    with open(attachment_path, "rb") as f:
        file_data = f.read()
        file_name = os.path.basename(attachment_path)
        message.add_attachment(
            file_data,
            maintype="application",
            subtype="vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename=file_name,
        )

    encoded_message = base64.urlsafe_b64encode(message.as_bytes()).decode()

    create_message = {"raw": encoded_message}

    try:
        send_message = (
            service.users().messages().send(userId="me", body=create_message).execute()
        )
        return send_message
    except HttpError as error:
        print(f"An error occurred: {error}")
        raise error


def create_tab_gui_mail(notebook):

    import tkinter as tk
    from tkinter import filedialog, messagebox, ttk
    import os
    import openpyxl

    # M√†u s·∫Øc v√† style
    bg_color = "#f4f8fb"  # n·ªÅn d·ªãu
    border_color = "#b3c6e0"
    group_bg = "#eaf1fb"
    label_fg = "#1a237e"
    entry_bg = "#ffffff"
    btn_color = "#1976D2"
    btn_hover = "#1565c0"
    btn_fg = "#fff"
    border_radius = 10

    tab_mail = tk.Frame(notebook, bg=bg_color, bd=0, highlightthickness=0)
    notebook.add(tab_mail, text="üì§ G·ª≠i Mail")

    state = {"excel_path": "", "sheets": [], "selected_sheet": ""}

    font_main = ("Segoe UI", 12)
    font_label = ("Segoe UI", 12, "bold")
    font_entry = ("Segoe UI", 12)
    font_btn = ("Segoe UI", 11, "bold")
    font_title = ("Segoe UI", 16, "bold")

    # Frame t·ªïng
    frame = tk.Frame(tab_mail, bg=bg_color, bd=0, highlightthickness=0)
    frame.pack(padx=30, pady=30, fill="both", expand=True)
    frame.columnconfigure(1, weight=1)

    # Ti√™u ƒë·ªÅ
    lbl_title = tk.Label(
        frame,
        text="üì§ G·ª≠i file Excel qua Email",
        font=font_title,
        bg=bg_color,
        fg="#0d47a1",
    )
    lbl_title.grid(row=0, column=0, sticky="w", pady=(0, 18), padx=(0, 0))
    lbl_note = tk.Label(
        frame,
        text="(G·ª≠i email k√®m sheet nh√¢n vi√™n c√≥ khi·∫øu n·∫°i)",
        font=("Segoe UI", 11, "italic"),
        bg=bg_color,
        fg="#b71c1c",
    )
    lbl_note.grid(row=0, column=1, sticky="w", pady=(0, 18), padx=(12, 0))

    # Email ng∆∞·ªùi nh·∫≠n
    tk.Label(
        frame, text="üìß Email ng∆∞·ªùi nh·∫≠n:", font=font_label, bg=bg_color, fg=label_fg
    ).grid(row=1, column=0, sticky="w", pady=8, padx=(0, 8))
    entry_email = tk.Entry(
        frame,
        font=font_entry,
        bg=entry_bg,
        relief="solid",
        bd=1,
        highlightthickness=1,
        highlightbackground=border_color,
    )
    entry_email.grid(
        row=1, column=1, columnspan=2, sticky="we", padx=5, pady=5, ipady=4
    )

    # Group ch·ªçn file
    group_file = tk.LabelFrame(
        frame,
        text="üìÅ Ch·ªçn file Excel",
        font=font_label,
        bg=group_bg,
        fg=label_fg,
        bd=0,
        relief="flat",
        labelanchor="nw",
    )
    group_file.grid(
        row=2, column=0, columnspan=3, sticky="we", pady=10, padx=0, ipadx=6, ipady=6
    )
    group_file.columnconfigure(1, weight=1)

    tk.Label(group_file, text="File:", font=font_main, bg=group_bg, fg="#222").grid(
        row=0, column=0, sticky="w", padx=(0, 5)
    )
    lbl_file = tk.Label(
        group_file, text="‚ùå Ch∆∞a ch·ªçn", fg="#ff1744", bg=group_bg, font=font_main
    )
    lbl_file.grid(row=0, column=1, sticky="w", padx=5)

    def chon_file_excel():
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file Excel", filetypes=[("Excel Files", "*.xlsx *.xls")]
        )
        if file_path:
            state["excel_path"] = file_path
            lbl_file.config(text=f"‚úÖ {os.path.basename(file_path)}", fg="#388e3c")
            wb = openpyxl.load_workbook(file_path, data_only=True)
            state["sheets"] = wb.sheetnames
            combo_sheet["values"] = state["sheets"]
            combo_sheet.set(state["sheets"][0])
            state["selected_sheet"] = state["sheets"][0]

    btn_chon = tk.Button(
        group_file,
        text="Ch·ªçn file",
        font=font_btn,
        bg=btn_color,
        fg=btn_fg,
        activebackground=btn_hover,
        activeforeground=btn_fg,
        relief="raised",
        bd=2,
        cursor="hand2",
        command=chon_file_excel,
    )
    btn_chon.grid(row=0, column=2, padx=8, ipadx=8, ipady=2)

    # Sheet c·∫ßn g·ª≠i
    tk.Label(
        frame, text="üßæ T√™n sheet c·∫ßn g·ª≠i:", font=font_label, bg=bg_color, fg="#222"
    ).grid(row=3, column=0, sticky="w", pady=8, padx=(0, 8))
    combo_sheet = ttk.Combobox(frame, state="readonly", font=font_entry)
    combo_sheet.grid(
        row=3, column=1, columnspan=2, sticky="we", padx=5, pady=5, ipady=2
    )
    combo_sheet.bind(
        "<<ComboboxSelected>>",
        lambda e: state.update({"selected_sheet": combo_sheet.get()}),
    )

    # Ti√™u ƒë·ªÅ email
    tk.Label(
        frame, text="üìå Ti√™u ƒë·ªÅ email:", font=font_label, bg=bg_color, fg="#222"
    ).grid(row=4, column=0, sticky="w", pady=8, padx=(0, 8))
    entry_subject = tk.Entry(
        frame,
        font=font_entry,
        bg=entry_bg,
        relief="solid",
        bd=1,
        highlightthickness=1,
        highlightbackground=border_color,
    )
    entry_subject.grid(
        row=4, column=1, columnspan=2, sticky="we", padx=5, pady=5, ipady=4
    )

    # N·ªôi dung email
    tk.Label(
        frame, text="üìù N·ªôi dung email:", font=font_label, bg=bg_color, fg="#222"
    ).grid(row=5, column=0, sticky="nw", pady=8, padx=(0, 8))
    text_body = tk.Text(
        frame,
        height=7,
        font=font_entry,
        bg=entry_bg,
        relief="solid",
        bd=1,
        highlightthickness=1,
        highlightbackground=border_color,
        wrap="word",
    )
    text_body.grid(row=5, column=1, columnspan=2, sticky="we", padx=5, pady=5)

    # Label tr·∫°ng th√°i g·ª≠i mail
    status_var = tk.StringVar()
    status_label = tk.Label(
        frame, textvariable=status_var, font=("Segoe UI", 11), fg="#1976d2", bg=bg_color
    )
    status_label.grid(row=7, column=0, columnspan=3, pady=(4, 0), sticky="w")

    def set_status(text, color="#1976d2"):
        status_var.set(text)
        status_label.config(fg=color)

    import threading

    def gui_mail():
        import os

        email = entry_email.get().strip()
        sheet_name = state.get("selected_sheet")
        file_path = state.get("excel_path")
        subject = entry_subject.get().strip()
        body = text_body.get("1.0", tk.END).strip()

        if not email or not file_path or not sheet_name or not subject or not body:
            set_status(
                "‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·ªß email, ti√™u ƒë·ªÅ, n·ªôi dung v√† ch·ªçn file.",
                color="#b71c1c",
            )
            return

        if not email or not file_path or not sheet_name:
            set_status("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß file, sheet v√† email.", color="#b71c1c")
            return

        def send_mail_task():
            try:
                window.after(
                    0,
                    lambda: set_status(
                        "‚è≥ ƒêang g·ª≠i mail, vui l√≤ng ƒë·ª£i...", color="#1976d2"
                    ),
                )

                file_tach = f"sheet_{sheet_name}.xlsx"
                wb_goc = openpyxl.load_workbook(file_path, data_only=True)
                sheet = wb_goc[sheet_name]
                wb_moi = openpyxl.Workbook()
                sheet_moi = wb_moi.active
                sheet_moi.title = sheet.title

                for row in sheet.iter_rows(values_only=False):
                    for cell in row:
                        sheet_moi[cell.coordinate].value = cell.value

                wb_moi.save(file_tach)

                send_email_with_attachment(
                    to=email, subject=subject, body=body, attachment_path=file_tach
                )

                def show_success():
                    set_status(f"‚úÖ ƒê√£ g·ª≠i {file_tach} ƒë·∫øn {email}", color="#388e3c")

                window.after(0, show_success)
            except Exception as e:

                def show_error():
                    set_status(f"‚ùå G·ª≠i mail th·∫•t b·∫°i: {e}", color="#b71c1c")

                window.after(0, show_error)
            finally:
                # X√≥a file t·∫°m sau khi g·ª≠i mail (d√π th√†nh c√¥ng hay th·∫•t b·∫°i)
                try:
                    if os.path.exists(file_tach):
                        os.remove(file_tach)
                except Exception:
                    pass

        threading.Thread(target=send_mail_task, daemon=True).start()

    btn_gui = tk.Button(
        frame,
        text="üì§ G·ª≠i Mail",
        font=font_btn,
        bg=btn_color,
        fg=btn_fg,
        activebackground=btn_hover,
        activeforeground=btn_fg,
        relief="raised",
        bd=3,
        cursor="hand2",
        command=gui_mail,
    )
    btn_gui.grid(row=6, column=0, columnspan=3, pady=28, ipadx=18, ipady=6, sticky="we")


def luu_du_lieu_ca_gay_T12():
    data = {
        "sang": {
            k: [t.strftime("%H:%M") for t in v]
            for k, v in allowed_late_morning_staff_T12.items()
        },
        "chieu": {
            k: [t.strftime("%H:%M") for t in v]
            for k, v in allowed_late_evening_staff_T12.items()
        },
    }
    with open("ca_gay_T12.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def tai_du_lieu_ca_gay_T12():
    if os.path.exists(CA_GAY_FILE_T12):
        with open(CA_GAY_FILE_T12, "r", encoding="utf-8") as f:
            du_lieu = json.load(f)
            allowed_late_morning_staff_T12.clear()
            allowed_late_evening_staff_T12.clear()
            allowed_late_morning_staff_T12.update(du_lieu.get("morning", {}))
            allowed_late_evening_staff_T12.update(du_lieu.get("evening", {}))


def xoa_cau_hinh_T12(staff_dict, entry_ten, entry_gio, tree):
    ten = entry_ten.get().strip()
    if ten in staff_dict:
        del staff_dict[ten]
        luu_du_lieu_ca_gay_T12()
        cap_nhat_treeview_T12(tree, staff_dict)
        entry_ten.delete(0, tk.END)
        entry_gio.delete(0, tk.END)


def cap_nhat_treeview_T12(tree, staff_dict):
    tree.delete(*tree.get_children())
    for ten, gio_list in staff_dict.items():
        tree.insert("", "end", values=(ten, ", ".join(gio_list)))


def them_cau_hinh_T12(staff_dict, entry_ten, entry_gio, tree):
    ten = entry_ten.get().strip()
    gio = entry_gio.get().strip()
    if not ten or not gio:
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n v√† gi·ªù.")
        return
    gio_list = [g.strip() for g in gio.split(",") if g.strip()]
    staff_dict[ten] = gio_list
    luu_du_lieu_ca_gay_T12()
    cap_nhat_treeview_T12(tree, staff_dict)
    entry_ten.delete(0, tk.END)
    entry_gio.delete(0, tk.END)


def tai_du_lieu_ca_gay(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r") as f:
            return json.load(f)
    return {"morning": {}, "evening": {}}


def luu_du_lieu_ca_gay():
    data = {
        "sang": {
            k: [t.strftime("%H:%M") for t in v]
            for k, v in allowed_late_morning_staff.items()
        },
        "chieu": {
            k: [t.strftime("%H:%M") for t in v]
            for k, v in allowed_late_evening_staff.items()
        },
    }
    with open("ca_gay_T3.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def nap_du_lieu_ca_gay():
    global allowed_late_morning_staff, allowed_late_evening_staff
    try:
        with open("ca_gay_T3.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        allowed_late_morning_staff = {
            k: [datetime.strptime(t, "%H:%M").time() for t in v]
            for k, v in data.get("sang", {}).items()
        }
        allowed_late_evening_staff = {
            k: [datetime.strptime(t, "%H:%M").time() for t in v]
            for k, v in data.get("chieu", {}).items()
        }
    except FileNotFoundError:
        allowed_late_morning_staff = {}
        allowed_late_evening_staff = {}


def nap_du_lieu_ca_gay_T12():
    global allowed_late_morning_staff_T12, allowed_late_evening_staff_T12
    try:
        with open("ca_gay_T12.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        allowed_late_morning_staff_T12 = {
            k: [datetime.strptime(t, "%H:%M").time() for t in v]
            for k, v in data.get("sang", {}).items()
        }
        allowed_late_evening_staff_T12 = {
            k: [datetime.strptime(t, "%H:%M").time() for t in v]
            for k, v in data.get("chieu", {}).items()
        }
    except FileNotFoundError:
        allowed_late_morning_staff_T12 = {}
        allowed_late_evening_staff_T12 = {}


def thoat_chuong_trinh():
    luu_du_lieu_ca_gay()
    luu_du_lieu_ca_gay_T12()
    window.quit()


def normalize_name(name: str) -> str:
    name = re.sub(r"^\d+_", "", name)
    name = name.replace("_", " ").strip()
    return name.title()


def cap_nhat_danh_sach(listbox, data_dict):
    listbox.delete(0, tk.END)
    for ten, times in data_dict.items():
        line = f"{ten}: {', '.join(t.strftime('%H:%M') for t in times)}"
        listbox.insert(tk.END, line)


def convert_data_to_str(data_dict):
    return {
        ten: [t.strftime("%H:%M") for t in times] for ten, times in data_dict.items()
    }


# Xo√° c·∫•u h√¨nh
def xoa_cau_hinh(listbox, data_dict, title, kv):
    selected = listbox.curselection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn d√≤ng ƒë·ªÉ xo√°.")
        return
    line = listbox.get(selected[0])
    ten_nv = line.split(":")[0].strip()
    if ten_nv in data_dict:
        del data_dict[ten_nv]
        cap_nhat_danh_sach(listbox, data_dict)
        messagebox.showinfo("ƒê√£ x√≥a", f"ƒê√£ x√≥a c·∫•u h√¨nh {title} c·ªßa {ten_nv}")

        # X√°c ƒë·ªãnh file t∆∞∆°ng ·ª©ng
        if kv == "T3":
            file_path = "ca_gay_T3.json"
        elif kv == "T12":
            file_path = "ca_gay_T12.json"
        else:
            return

        # ƒê·ªçc file JSON hi·ªán t·∫°i (n·∫øu c√≥)
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except FileNotFoundError:
            data = {}

        # N·∫øu data_dict r·ªóng sau khi x√≥a, th√¨ x√≥a lu√¥n key trong JSON
        if not data_dict:
            if title in data:
                del data[title]
        else:
            data[title] = convert_data_to_str(
                data_dict
            )  # üëà x·ª≠ l√Ω datetime tr∆∞·ªõc khi l∆∞u

        # Ghi l·∫°i file JSON
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)


# L∆∞u c·∫•u h√¨nh ca
def luu_cau_hinh(
    raw_name, gio_str, data_dict, listbox, title="Chi·ªÅu", time_format="HH:MM"
):
    ten_nv = normalize_name(raw_name)
    if not ten_nv.strip() or not gio_str.strip():
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n v√† gi·ªù.")
        return

    try:
        gio_list = [
            datetime.strptime(g.strip(), "%H:%M").time() for g in gio_str.split(",")
        ]
    except ValueError:
        messagebox.showerror(
            "L·ªói", f"Gi·ªù sai ƒë·ªãnh d·∫°ng. D√πng {time_format}, v√≠ d·ª•: 07:00,08:00"
        )
        return

    data_dict[ten_nv] = sorted(gio_list)
    cap_nhat_danh_sach(listbox, data_dict)

    # ‚úÖ L∆∞u xu·ªëng file sau khi c·∫≠p nh·∫≠t
    try:
        luu_du_lieu_ca_gay()
    except Exception as e:
        messagebox.showerror("L·ªói khi l∆∞u", f"Kh√¥ng th·ªÉ l∆∞u file c·∫•u h√¨nh:\n{e}")
        return

    messagebox.showinfo("ƒê√£ l∆∞u", f"‚úÖ ƒê√£ l∆∞u ca g√£y {title} cho: {ten_nv}")


# ================== L·∫§Y T√äN NH√ÇN VI√äN T·ª™ EXCEL ==================
def get_staff_names_from_excel(file_path):
    try:
        wb = openpyxl.load_workbook(file_path, data_only=True)
        # Lo·∫°i b·ªè c√°c sheet m·∫∑c ƒë·ªãnh n·∫øu c√≥
        ignore_sheets = {"Sheet", "Sheet1", "Sheet2", "Sheet3"}
        names = [s for s in wb.sheetnames if s not in ignore_sheets]
        return sorted(set(names))
    except Exception:
        return []


# ================== X·ª¨ L√ù FILE ==================
def chon_file_excel():
    global input_file
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn file Excel", filetypes=[("Excel Files", "*.xlsx *.xls")]
    )
    if file_path:
        input_file = file_path
        label_file.config(text=f"‚úÖ {os.path.basename(file_path)}")
        btn_chon_thu_muc.config(state="normal")
        entry_ten_file.config(state="normal")
        # C·∫≠p nh·∫≠t danh s√°ch t√™n nh√¢n vi√™n cho c·∫£ Combobox s√°ng v√† chi·ªÅu
        staff_names = get_staff_names_from_excel(file_path)
        combobox_ten_nv_sang_tab1["values"] = staff_names
        combobox_ten_nv_chieu_tab1["values"] = staff_names
        if staff_names:
            combobox_ten_nv_sang_tab1.set(staff_names[0])
            combobox_ten_nv_chieu_tab1.set(staff_names[0])


def chon_file_excel_T12():
    global input_file_tab2
    file_path_2 = filedialog.askopenfilename(
        title="Ch·ªçn file Excel", filetypes=[("Excel Files", "*.xlsx *.xls")]
    )
    if file_path_2:
        input_file_tab2 = file_path_2
        label_file2.config(text=f"‚úÖ {os.path.basename(file_path_2)}")
        btn_chon_thu_muc2.config(state="normal")
        entry_ten_file2.config(state="normal")
        # C·∫≠p nh·∫≠t danh s√°ch t√™n nh√¢n vi√™n cho c·∫£ Combobox s√°ng v√† chi·ªÅu tab T12
        staff_names = get_staff_names_from_excel(file_path_2)
        combobox_ten_nv_sang_tab2["values"] = staff_names
        combobox_ten_nv_chieu_tab2["values"] = staff_names
        if staff_names:
            combobox_ten_nv_sang_tab2.set(staff_names[0])
            combobox_ten_nv_chieu_tab2.set(staff_names[0])


def chon_thu_muc():
    global output_folder
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c xu·∫•t")
    if not folder:
        return
    output_folder = folder
    ten_file = entry_ten_file.get().strip()
    if not ten_file:
        messagebox.showerror("Thi·∫øu t√™n file", "Vui l√≤ng nh·∫≠p t√™n file.")
        return
    if not ten_file.endswith(".xlsx"):
        ten_file += ".xlsx"
    output_path = os.path.join(output_folder, ten_file)
    if os.path.exists(output_path):
        messagebox.showwarning("Tr√πng t√™n", "‚ö†Ô∏è T√™n file ƒë√£ t·ªìn t·∫°i!")
        return
    label_folder.config(text=f"üìÅ N∆°i l∆∞u: {output_path}")
    status_var_export_t3.set("‚è≥ ƒêang xu·∫•t file, vui l√≤ng ƒë·ª£i...")
    status_label_export_t3.config(fg="#1976d2")
    window.update_idletasks()
    xu_ly_file_excel(input_file, output_folder, ten_file)


def chon_thu_muc_tab2():
    global output_folder_tab2
    folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c xu·∫•t")
    if not folder:
        return
    output_folder_tab2 = folder
    ten_file = entry_ten_file2.get().strip()
    if not ten_file:
        messagebox.showerror("Thi·∫øu t√™n file", "Vui l√≤ng nh·∫≠p t√™n file.")
        return
    if not ten_file.endswith(".xlsx"):
        ten_file += ".xlsx"
    output_path = os.path.join(output_folder_tab2, ten_file)
    if os.path.exists(output_path):
        messagebox.showwarning("Tr√πng t√™n", "‚ö†Ô∏è T√™n file ƒë√£ t·ªìn t·∫°i!")
        return
    label_folder2.config(text=f"üìÅ N∆°i l∆∞u: {output_path}")
    status_var_export_t12.set("‚è≥ ƒêang xu·∫•t file, vui l√≤ng ƒë·ª£i...")
    status_label_export_t12.config(fg="#1976d2")
    window.update_idletasks()
    xu_ly_file_excel2(input_file_tab2, output_folder_tab2, ten_file)


def xu_ly_file_excel(excel_file, folder_out, filename):
    try:
        from main import process_excel

        status_var_export_t3.set("‚è≥ ƒêang xu·∫•t file, vui l√≤ng ƒë·ª£i...")
        status_label_export_t3.config(fg="#1976d2")
        process_excel(
            excel_file,
            folder_out,
            filename,
            allowed_late_evening_staff,
            allowed_late_morning_staff,
        )
        status_var_export_t3.set("‚úÖ ƒê√£ xu·∫•t file th√†nh c√¥ng!")
        status_label_export_t3.config(fg="#388e3c")
        file_path = os.path.join(folder_out, filename)
        try:
            os.startfile(file_path)
        except Exception:
            pass
    except Exception as e:
        status_var_export_t3.set(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}")
        status_label_export_t3.config(fg="#b71c1c")


def xu_ly_file_excel2(excel_file, folder_out, filename):
    try:
        from main import process_excel

        status_var_export_t12.set("‚è≥ ƒêang xu·∫•t file, vui l√≤ng ƒë·ª£i...")
        status_label_export_t12.config(fg="#1976d2")
        process_excel(
            excel_file,
            folder_out,
            filename,
            allowed_late_evening_staff_T12,
            allowed_late_morning_staff_T12,
        )
        status_var_export_t12.set("‚úÖ ƒê√£ xu·∫•t file th√†nh c√¥ng!")
        status_label_export_t12.config(fg="#388e3c")
        file_path = os.path.join(folder_out, filename)
        try:
            os.startfile(file_path)
        except Exception:
            pass
    except Exception as e:
        status_var_export_t12.set(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}")
        status_label_export_t12.config(fg="#b71c1c")


# == DEF TAB RULE ===


def tao_tab_quy_dinh(tab):
    tab.grid_rowconfigure(0, weight=1)
    tab.grid_columnconfigure(0, weight=1)

    # M√†u s·∫Øc v√† style
    bg_color = "#f6fafd"
    card_colors = [
        ("#e3f2fd", "#1976d2"),  # blue
        ("#fffde7", "#fbc02d"),  # yellow
        ("#ede7f6", "#7e57c2"),  # purple
        ("#e8f5e9", "#388e3c"),  # green
        ("#fff3e0", "#f57c00"),  # orange
    ]
    border_color = "#b3c6e0"
    shadow_color = "#dbe6f6"
    title_fg = "#0d47a1"
    content_fg = "#222"
    font_title = ("Segoe UI", 22, "bold")
    font_card_title = ("Segoe UI", 15, "bold")
    font_content = ("Segoe UI", 12)

    # Canvas ƒë·ªÉ scroll
    canvas = tk.Canvas(tab, borderwidth=0, highlightthickness=0, bg=bg_color)
    frame = tk.Frame(canvas, bg=bg_color)
    scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=scrollbar.set)

    scrollbar.grid(row=0, column=1, sticky="ns")
    canvas.grid(row=0, column=0, sticky="nsew")
    canvas.create_window((0, 0), window=frame, anchor="nw")

    def on_frame_configure(event):
        canvas.configure(scrollregion=canvas.bbox("all"))

    frame.bind("<Configure>", on_frame_configure)

    # --- Mouse wheel scroll support (Windows, Mac, Linux) ---
    def _on_mousewheel(event):
        if event.delta:
            canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
        elif event.num == 4:
            canvas.yview_scroll(-1, "units")
        elif event.num == 5:
            canvas.yview_scroll(1, "units")

    # Bind mousewheel for Windows and Mac
    canvas.bind_all("<MouseWheel>", _on_mousewheel)
    # Bind mousewheel for Linux
    canvas.bind_all("<Button-4>", _on_mousewheel)
    canvas.bind_all("<Button-5>", _on_mousewheel)

    # Ti√™u ƒë·ªÅ ch√≠nh c·ª±c l·ªõn, c√≥ icon (t√°ch icon v√† ch·ªØ ƒë·ªÉ kh√¥ng l·ªói font)
    title_frame = tk.Frame(frame, bg=bg_color)
    title_frame.grid(row=0, column=0, sticky="w", padx=40, pady=(24, 18))
    tk.Label(
        title_frame, text="üìå", font=("Segoe UI Emoji", 32), bg=bg_color, fg=title_fg
    ).pack(side="left", padx=(0, 12))
    tk.Label(
        title_frame,
        text="QUY ƒê·ªäNH CH·∫§M C√îNG",
        font=font_title,
        fg=title_fg,
        bg=bg_color,
    ).pack(side="left")

    # Danh s√°ch quy ƒë·ªãnh (card style)
    quy_dinh_sections = [
        {
            "title": "üí∞ Quy ƒë·ªãnh S·ª≠ d·ª•ng h·ªá th·ªëng",
            "content": [
                "‚Ä¢ Ch·ªâ ƒë∆∞·ª£c ch·∫•m c√¥ng s·ªõm t·ªëi ƒëa 15 ph√∫t tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ca",
                "‚Ä¢ T√™n nh√¢n vi√™n ph·∫£i ƒë∆∞·ª£c ƒë·∫∑t ƒë√∫ng theo ƒë·ªãnh d·∫°ng vi·∫øt Hoa",
                "‚Ä¢ Khi c·∫•u h√¨nh ca g√£y c·∫ßn ghi lu√¥n c·∫£ ca th∆∞·ªùng (n·∫øu c√≥ l·ªãch c·ªßa ca th∆∞·ªùng)",
                "‚Ä¢ N·∫øu tƒÉng ca, c·∫ßn b√°o tr∆∞·ªõc cho ch·ªß nh√≥m ƒë·ªÉ ƒë∆∞·ª£c ghi nh·∫≠n",
                "‚Ä¢ N·∫øu c√≥ l√Ω do ƒëi tr·ªÖ, c·∫ßn b√°o l·∫°i ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω h·ª£p l·ªá",
            ],
        },
        {
            "title": "üïí Ca s√°ng (07:00 ‚Äì 15:00)",
            "content": [
                "‚Ä¢ M·ªói ph√∫t ƒëi tr·ªÖ b·ªã tr·ª´ 5.000 VNƒê; n·∫øu tr·ªÖ t·ª´ 30 ph√∫t th√¨ tr·ª´ c·ªë ƒë·ªãnh 200.000 VNƒê",
                "‚Ä¢ N·∫øu ƒë·∫øn tr∆∞·ªõc 07:00 th√¨ v·∫´n t√≠nh th·ªùi gian l√†m t·ª´ 07:00 (kh√¥ng c·ªông th√™m gi·ªù)",
                "‚Ä¢ Ra v·ªÅ s·ªõm kh√¥ng b·ªã tr·ª´ l∆∞∆°ng, nh∆∞ng ch·ªâ ƒë∆∞·ª£c t√≠nh l∆∞∆°ng theo s·ªë gi·ªù l√†m th·ª±c t·∫ø",
            ],
        },
        {
            "title": "üåô Ca chi·ªÅu (15:00 ‚Äì 23:00)",
            "content": [
                "‚Ä¢ √Åp d·ª•ng quy ƒë·ªãnh t∆∞∆°ng t·ª± nh∆∞ ca s√°ng",
                "‚Ä¢ N·∫øu ƒë·∫øn tr∆∞·ªõc 15:00 th√¨ v·∫´n t√≠nh th·ªùi gian l√†m t·ª´ 15:00",
                "‚Ä¢ Ra v·ªÅ s·ªõm kh√¥ng b·ªã tr·ª´ l∆∞∆°ng, nh∆∞ng ch·ªâ t√≠nh theo s·ªë gi·ªù l√†m th·ª±c t·∫ø",
            ],
        },
        {
            "title": "üîÄ Ca g√£y linh ho·∫°t",
            "content": [
                "‚Ä¢ Nh√¢n vi√™n ch·ªâ ƒë∆∞·ª£c ch·∫•m c√¥ng s·ªõm t·ªëi ƒëa 15 ph√∫t tr∆∞·ªõc gi·ªù ca g√£y ƒë√£ ƒëƒÉng k√Ω",
                "‚Ä¢ N·∫øu ƒë·∫øn ƒë√∫ng gi·ªù linh ho·∫°t ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát: ‚úÖ ƒê∆∞·ª£c t√≠nh c√¥ng b√¨nh th∆∞·ªùng",
                "‚Ä¢ N·∫øu ƒë·∫øn tr·ªÖ so v·ªõi gi·ªù linh ho·∫°t: ‚ùå B·ªã tr·ª´ 5.000 VNƒê/ph√∫t; n·∫øu qu√° 30 ph√∫t th√¨ tr·ª´ 200.000 VNƒê",
                "‚Ä¢ Gi·ªù k·∫øt th√∫c ca l√† c·ªë ƒë·ªãnh: 15:00 (ca s√°ng) ho·∫∑c 23:00 (ca chi·ªÅu)",
            ],
        },
        {
            "title": "üí∞ C√°ch t√≠nh l∆∞∆°ng",
            "content": [
                "‚Ä¢ L∆∞∆°ng = T·ªïng s·ªë gi·ªù l√†m √ó ƒê∆°n gi√° theo gi·ªù",
                "‚Ä¢ Gi·ªù l√†m ch·ªâ ƒë∆∞·ª£c t√≠nh trong khung gi·ªù h·ª£p l·ªá c·ªßa t·ª´ng ca",
                "‚Ä¢ File Excel xu·∫•t ra s·∫Ω ghi r√µ s·ªë gi·ªù l√†m, s·ªë ti·ªÅn l∆∞∆°ng v√† c√°c kho·∫£n tr·ª´ n·∫øu c√≥",
            ],
        },
    ]

    for idx, section in enumerate(quy_dinh_sections):
        card_bg, accent = card_colors[idx % len(card_colors)]
        card_shadow = shadow_color
        # Shadow effect
        card_shadow_frame = tk.Frame(frame, bg=card_shadow)
        card_shadow_frame.grid(
            row=idx + 1, column=0, sticky="ew", padx=38, pady=(0, 24)
        )
        # Card
        card = tk.Frame(
            card_shadow_frame,
            bg=card_bg,
            bd=0,
            highlightbackground=border_color,
            highlightthickness=2,
        )
        card.grid(row=0, column=0, sticky="ewns")
        card.grid_columnconfigure(0, weight=1)
        # Title
        tk.Label(
            card,
            text=section["title"],
            font=font_card_title,
            fg=accent,
            bg=card_bg,
            anchor="w",
        ).grid(row=0, column=0, sticky="w", padx=18, pady=(18, 8))
        # Content
        for i, item in enumerate(section["content"]):
            tk.Label(
                card,
                text=item,
                font=font_content,
                fg=content_fg,
                bg=card_bg,
                anchor="w",
                wraplength=820,
                justify="left",
            ).grid(row=i + 1, column=0, sticky="w", padx=36, pady=2)


# ================== GIAO DI·ªÜN ==================

window = tk.Tk()
window.title("Ch·∫•m C√¥ng - T√≠nh L∆∞∆°ng")
window.geometry("1060x780")
window.minsize(1060, 780)
window_width = 1060
window_height = 780

# L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

# T√≠nh v·ªã tr√≠ ƒë·ªÉ cƒÉn gi·ªØa
x = (screen_width // 2) - (window_width // 2)
y = (screen_height // 2) - (window_height // 2) - 40

# C·∫≠p nh·∫≠t v·ªã tr√≠
window.geometry(f"{window_width}x{window_height}+{x}+{y}")

title_font = ("Segoe UI", 14, "bold")
default_font = ("Segoe UI", 12)
title_font_big = ("Segoe UI", 18, "bold")

# === TAB UI ƒê·∫∏P ===
notebook = ttk.Notebook(window)
style = ttk.Style()
style.theme_use("clam")

# M√†u s·∫Øc cho tab
tab_bg = "#eaf1fb"
tab_selected_bg = "#1976D2"
tab_selected_fg = "#fff"
tab_hover_bg = "#b3c6e0"
tab_border = "#b3c6e0"

# Style cho tab
style.configure("TNotebook", background="#f4f8fb", borderwidth=0)
style.configure(
    "TNotebook.Tab",
    font=("Segoe UI", 12, "bold"),
    padding=[30, 12],
    background=tab_bg,
    foreground="#222",
    borderwidth=0,
    focuscolor=tab_border,
    lightcolor=tab_border,
    bordercolor=tab_border,
    relief="flat",
)
style.map(
    "TNotebook.Tab",
    background=[
        ("selected", tab_selected_bg),
        ("active", tab_hover_bg),
        ("!selected", tab_bg),
    ],
    foreground=[
        ("selected", tab_selected_fg),
        ("active", "#222"),
        ("!selected", "#222"),
    ],
    expand=[("selected", [1, 1, 1, 0])],
)

notebook.pack(fill="both", expand=True, padx=16, pady=12)


tab1 = tk.Frame(notebook, bg="#f5faff")
tab2 = tk.Frame(notebook, bg="#f5faff")
tab3 = tk.Frame(notebook, bg="#f4f8fb")

notebook.add(tab1, text="T3 - Qu√°n Coffee")
notebook.add(tab2, text="T12 - Qu√°n C∆°m")
create_tab_gui_mail(notebook)
notebook.add(tab3, text="Quy ƒë·ªãnh")
tao_tab_quy_dinh(tab3)


# ==== TAB T3 ====
tab1.configure(bg="#f7fafd")
label_tab1_title = tk.Label(
    tab1,
    text="T3 - Qu√°n Coffee",
    font=("Segoe UI", 17, "bold"),
    bg="#f7fafd",
    fg="#1a237e",
)
label_tab1_title.grid(row=0, column=0, columnspan=2, pady=(16, 6), sticky="ew")


frame_input = tk.LabelFrame(
    tab1,
    text="üìù B∆∞·ªõc 1: Ch·ªçn file",
    font=title_font,
    bg="#fafdff",
    fg="#222",
    bd=1,
    relief="groove",
    padx=14,
    pady=10,
    labelanchor="nw",
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
frame_input.grid(row=1, column=0, columnspan=2, sticky="ew", padx=22, pady=8)
frame_input.columnconfigure(1, weight=1)

btn_chon_file = tk.Button(
    frame_input,
    text="üìÇ Ch·ªçn file Excel",
    font=default_font,
    bg="#f5faff",
    fg="#222",
    activebackground="#e3eafc",
    activeforeground="#222",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=chon_file_excel,
)
btn_chon_file.grid(row=0, column=0, padx=8, pady=5, ipadx=4, ipady=1)

label_file = tk.Label(
    frame_input, text="Ch∆∞a ch·ªçn file", font=default_font, bg="#ffffff", fg="#ff1744"
)
label_file.grid(row=0, column=1, sticky="w", padx=8)


# Khung c·∫•u h√¨nh ca g√£y r√µ r√†ng, border d·ªãu, padding r·ªông
frame_ca_gay = tk.LabelFrame(
    tab1,
    text="‚öôÔ∏è B∆∞·ªõc 2: C·∫•u h√¨nh Ca G√£y",
    font=title_font,
    bg="#fafdff",
    fg="#1a237e",
    bd=1,
    relief="groove",
    padx=14,
    pady=10,
    labelanchor="nw",
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
frame_ca_gay.grid(row=2, column=0, columnspan=2, sticky="nsew", padx=22, pady=8)
frame_ca_gay.columnconfigure(0, weight=1)
frame_ca_gay.columnconfigure(1, weight=1)

# === Ca G√ÉY S√ÅNG ===

# Ca g√£y s√°ng: khung s√°ng nh·∫π, border m·∫£nh
frame_sang = tk.Frame(
    frame_ca_gay,
    bg="#f7fbff",
    bd=1,
    relief="solid",
    highlightbackground="#b3c6e0",
    highlightthickness=1,
)
frame_sang.grid(row=0, column=0, sticky="nsew", padx=6, pady=4)

tk.Label(
    frame_sang,
    text="Ca G√£y S√°ng:",
    font=("Segoe UI", 13, "bold"),
    bg="#f7fbff",
    fg="#1976d2",
).grid(row=0, column=0, sticky="w", padx=4, pady=2)

# Nh·∫≠p s√°ng
labels_sang = ["üåÖ Nh√¢n vi√™n (VD: Nguyen Van A):", "Gi·ªù b·∫Øt ƒë·∫ßu (07:00, 08:00,...):"]
for i, label in enumerate(labels_sang):
    tk.Label(frame_sang, text=label, font=default_font, bg="#f7fbff", fg="#222").grid(
        row=i + 1, column=0, sticky="w", padx=4, pady=2
    )

# Combobox ch·ªçn t√™n nh√¢n vi√™n (thay cho Entry)
ten_nv_sang_var = tk.StringVar()
combobox_ten_nv_sang_tab1 = ttk.Combobox(
    frame_sang, textvariable=ten_nv_sang_var, font=default_font, state="readonly"
)
combobox_ten_nv_sang_tab1.grid(row=1, column=1, sticky="ew", padx=4, pady=2)
combobox_ten_nv_sang_tab1["values"] = []

entry_gio_sang_tab1 = tk.Entry(
    frame_sang,
    font=default_font,
    bg="#ffffff",
    relief="solid",
    bd=1,
    highlightthickness=1,
)
entry_gio_sang_tab1.grid(row=2, column=1, sticky="ew", padx=4, pady=2)
entry_gio_sang_tab1.config(highlightcolor="#1976d2", highlightbackground="#b3c6e0")


btn_luu_sang = tk.Button(
    frame_sang,
    text="‚úÖ L∆∞u Ca G√£y S√°ng",
    font=default_font,
    bg="#f5faff",
    fg="#1976d2",
    activebackground="#e3eafc",
    activeforeground="#1976d2",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: (
        luu_cau_hinh(
            ten_nv_sang_var.get(),
            entry_gio_sang_tab1.get(),
            allowed_late_morning_staff,
            listbox_gay_sang_tab1,
            "S√°ng",
        ),
        luu_du_lieu_ca_gay(),
    ),
)
btn_luu_sang.grid(row=3, column=0, columnspan=2, pady=(5, 2), ipadx=4)


listbox_gay_sang_tab1 = tk.Listbox(
    frame_sang,
    font=default_font,
    height=6,
    bg="#fafdff",
    bd=1,
    relief="solid",
    highlightthickness=1,
    highlightbackground="#e3eaf3",
)
listbox_gay_sang_tab1.grid(row=4, column=0, columnspan=2, sticky="nsew", padx=4, pady=2)


btn_xoa_sang = tk.Button(
    frame_sang,
    text="üóëÔ∏è X√≥a Ca G√£y S√°ng",
    font=default_font,
    bg="#f5faff",
    fg="#b71c1c",
    activebackground="#ffeaea",
    activeforeground="#b71c1c",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: xoa_cau_hinh(
        listbox_gay_sang_tab1, allowed_late_morning_staff, "sang", "T3"
    ),
)
btn_xoa_sang.grid(row=5, column=0, columnspan=2, pady=5, ipadx=4)

frame_sang.columnconfigure(1, weight=1)
frame_sang.rowconfigure(3, weight=1)

# === CA CHI·ªÄU G√ÉY ====

# Ca g√£y chi·ªÅu: khung s√°ng nh·∫π, border m·∫£nh
frame_chieu = tk.Frame(
    frame_ca_gay,
    bg="#fdfcf7",
    bd=1,
    relief="solid",
    highlightbackground="#b3c6e0",
    highlightthickness=1,
)
frame_chieu.grid(row=0, column=1, sticky="nsew", padx=6, pady=4)

tk.Label(
    frame_chieu,
    text="Ca G√£y Chi·ªÅu:",
    font=("Segoe UI", 13, "bold"),
    bg="#fdfcf7",
    fg="#1976d2",
).grid(row=0, column=0, sticky="w", padx=4, pady=2)


# Nh·∫≠p chi·ªÅu
labels_chieu = ["üåá Nh√¢n vi√™n (VD: Nguyen Van A):", "Gi·ªù b·∫Øt ƒë·∫ßu (15:00, 16:00,...):"]
for i, label in enumerate(labels_chieu):
    tk.Label(frame_chieu, text=label, font=default_font, bg="#fdfcf7", fg="#222").grid(
        row=i + 1, column=0, sticky="w", padx=4, pady=2
    )

# Combobox ch·ªçn t√™n nh√¢n vi√™n cho ca g√£y chi·ªÅu
ten_nv_chieu_var = tk.StringVar()
combobox_ten_nv_chieu_tab1 = ttk.Combobox(
    frame_chieu, textvariable=ten_nv_chieu_var, font=default_font, state="readonly"
)
combobox_ten_nv_chieu_tab1.grid(row=1, column=1, sticky="ew", padx=4, pady=2)
combobox_ten_nv_chieu_tab1["values"] = []

entry_gio = tk.Entry(
    frame_chieu,
    font=default_font,
    bg="#ffffff",
    relief="solid",
    bd=1,
    highlightthickness=1,
)
entry_gio.grid(row=2, column=1, sticky="ew", padx=4, pady=2)
entry_gio.config(highlightcolor="#fbc02d", highlightbackground="#e0b3b3")

btn_luu_chieu = tk.Button(
    frame_chieu,
    text="‚úÖ L∆∞u Ca G√£y Chi·ªÅu",
    font=default_font,
    bg="#f5faff",
    fg="#1976d2",
    activebackground="#e3eafc",
    activeforeground="#1976d2",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: (
        luu_cau_hinh(
            ten_nv_chieu_var.get(),
            entry_gio.get(),
            allowed_late_evening_staff,
            listbox_gay,
            "Chi·ªÅu",
        ),
        luu_du_lieu_ca_gay(),
    ),
)
btn_luu_chieu.grid(row=3, column=0, columnspan=2, pady=(5, 2), ipadx=4)


listbox_gay = tk.Listbox(
    frame_chieu,
    font=default_font,
    height=6,
    bg="#fffdfa",
    bd=1,
    relief="solid",
    highlightthickness=1,
    highlightbackground="#f0e3e3",
)
listbox_gay.grid(row=4, column=0, columnspan=2, sticky="nsew", padx=4, pady=2)


btn_xoa_chieu = tk.Button(
    frame_chieu,
    text="üóëÔ∏è X√≥a Ca G√£y Chi·ªÅu",
    font=default_font,
    bg="#f5faff",
    fg="#b71c1c",
    activebackground="#ffeaea",
    activeforeground="#b71c1c",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: xoa_cau_hinh(
        listbox_gay, allowed_late_evening_staff, "chieu", "T3"
    ),
)
btn_xoa_chieu.grid(row=5, column=0, columnspan=2, pady=5, ipadx=4)

frame_chieu.columnconfigure(1, weight=1)
frame_chieu.rowconfigure(3, weight=1)

# === KHUNG L∆ØU FILE ===

# Khung xu·∫•t file r√µ r√†ng, border d·ªãu, padding r·ªông
frame_output = tk.LabelFrame(
    tab1,
    text="üíæ B∆∞·ªõc 3: Xu·∫•t File",
    font=title_font,
    bg="#fafdff",
    fg="#1a237e",
    bd=1,
    relief="groove",
    padx=14,
    pady=10,
    labelanchor="nw",
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
frame_output.grid(row=3, column=0, columnspan=2, sticky="ew", padx=22, pady=8)
frame_output.columnconfigure(1, weight=1)

# --- Status label for export (T3) ---
status_var_export_t3 = tk.StringVar()
status_label_export_t3 = tk.Label(
    frame_output,
    textvariable=status_var_export_t3,
    font=("Segoe UI", 11),
    fg="#1976d2",
    bg="#fafdff",
)

tk.Label(
    frame_output, text="T√™n file (.xlsx):", font=default_font, bg="#ffffff", fg="#222"
).grid(row=0, column=0, sticky="w", padx=5)


# --- Placeholder cho √¥ nh·∫≠p t√™n file (tab T3) ---
def set_placeholder_t3(event=None):
    if not entry_ten_file.get():
        entry_ten_file.insert(0, "Nh·∫≠p t√™n file xu·∫•t ra (.xlsx)")
        entry_ten_file.config(fg="#888")


def clear_placeholder_t3(event=None):
    if entry_ten_file.get() == "Nh·∫≠p t√™n file xu·∫•t ra (.xlsx)":
        entry_ten_file.delete(0, tk.END)
        entry_ten_file.config(fg="#222")


entry_ten_file = tk.Entry(
    frame_output,
    font=default_font,
    width=40,
    state="normal",
    bg="#ffffff",
    relief="solid",
    bd=1,
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
entry_ten_file.grid(row=0, column=1, padx=5, sticky="ew")
set_placeholder_t3()
entry_ten_file.bind("<FocusIn>", clear_placeholder_t3)
entry_ten_file.bind("<FocusOut>", set_placeholder_t3)


btn_chon_thu_muc = tk.Button(
    frame_output,
    text="üíæ Ch·ªçn n∆°i l∆∞u file",
    font=default_font,
    bg="#f5faff",
    fg="#1a237e",
    activebackground="#e3eafc",
    activeforeground="#1a237e",
    state="disabled",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=chon_thu_muc,
)
btn_chon_thu_muc.grid(row=1, column=0, pady=10, ipadx=4, sticky="w")
status_label_export_t3.grid(row=1, column=1, sticky="w", padx=(10, 0))


label_folder = tk.Label(
    frame_output,
    text="Ch∆∞a ch·ªçn n∆°i l∆∞u",
    font=default_font,
    bg="#ffffff",
    fg="#b71c1c",
)
label_folder.grid(row=2, column=0, columnspan=2)


# ==== C·∫¢I TI·∫æN UI ƒê∆†N GI·∫¢N, R√ï R√ÄNG CHO TAB T12 ====
tab2.configure(bg="#f7fafd")
label_tab_title2 = tk.Label(
    tab2,
    text="T12 - Qu√°n C∆°m",
    font=("Segoe UI", 17, "bold"),
    bg="#f7fafd",
    fg="#1a237e",
)
label_tab_title2.grid(row=0, column=0, columnspan=2, pady=(16, 6), sticky="ew")


# Khung ch·ªçn file r√µ r√†ng, bo g√≥c nh·∫π, border d·ªãu
frame_input2 = tk.LabelFrame(
    tab2,
    text="üìù B∆∞·ªõc 1: Ch·ªçn file",
    font=title_font,
    bg="#fafdff",
    fg="#222",
    bd=1,
    relief="groove",
    padx=14,
    pady=10,
    labelanchor="nw",
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
frame_input2.grid(row=1, column=0, columnspan=2, sticky="ew", padx=22, pady=8)
frame_input2.columnconfigure(1, weight=1)

btn_chon_file2 = tk.Button(
    frame_input2,
    text="üìÇ Ch·ªçn file Excel",
    font=default_font,
    bg="#f5faff",
    fg="#222",
    activebackground="#e3eafc",
    activeforeground="#222",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=chon_file_excel_T12,
)
btn_chon_file2.grid(row=0, column=0, padx=8, pady=5, ipadx=4, ipady=1)

label_file2 = tk.Label(
    frame_input2, text="Ch∆∞a ch·ªçn file", font=default_font, bg="#ffffff", fg="#ff1744"
)
label_file2.grid(row=0, column=1, sticky="w", padx=8)


# Khung c·∫•u h√¨nh ca g√£y r√µ r√†ng, border d·ªãu, padding r·ªông
frame_ca_gay2 = tk.LabelFrame(
    tab2,
    text="‚öôÔ∏è B∆∞·ªõc 2: C·∫•u h√¨nh Ca G√£y",
    font=title_font,
    bg="#fafdff",
    fg="#1a237e",
    bd=1,
    relief="groove",
    padx=14,
    pady=10,
    labelanchor="nw",
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
frame_ca_gay2.grid(row=2, column=0, columnspan=2, sticky="nsew", padx=22, pady=8)
frame_ca_gay2.columnconfigure(0, weight=1)
frame_ca_gay2.columnconfigure(1, weight=1)

# === Ca G√ÉY S√ÅNG TAB 2 ===

# Ca g√£y s√°ng: khung s√°ng nh·∫π, border m·∫£nh
frame_sang2 = tk.Frame(
    frame_ca_gay2,
    bg="#f7fbff",
    bd=1,
    relief="solid",
    highlightbackground="#b3c6e0",
    highlightthickness=1,
)
frame_sang2.grid(row=0, column=0, sticky="nsew", padx=6, pady=4)

tk.Label(
    frame_sang2,
    text="Ca G√£y S√°ng:",
    font=("Segoe UI", 13, "bold"),
    bg="#f7fbff",
    fg="#1976d2",
).grid(row=0, column=0, sticky="w", padx=4, pady=2)

tk.Label(
    frame_sang2,
    text="üåÖ Nh√¢n vi√™n (VD: Nguyen Van A):",
    font=default_font,
    bg="#f7fbff",
    fg="#222",
).grid(row=1, column=0, sticky="w", padx=4, pady=2)
# Combobox ch·ªçn t√™n nh√¢n vi√™n cho ca g√£y s√°ng tab T12
ten_nv_sang_tab2_var = tk.StringVar()
combobox_ten_nv_sang_tab2 = ttk.Combobox(
    frame_sang2, textvariable=ten_nv_sang_tab2_var, font=default_font, state="readonly"
)
combobox_ten_nv_sang_tab2.grid(row=1, column=1, sticky="ew", padx=4, pady=2)
combobox_ten_nv_sang_tab2["values"] = []

tk.Label(
    frame_sang2,
    text="Gi·ªù b·∫Øt ƒë·∫ßu (07:00, 08:00,...):",
    font=default_font,
    bg="#f7fbff",
    fg="#222",
).grid(row=2, column=0, sticky="w", padx=4, pady=2)
entry_gio_sang_tab2 = tk.Entry(
    frame_sang2,
    font=default_font,
    bg="#ffffff",
    relief="solid",
    bd=1,
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
entry_gio_sang_tab2.grid(row=2, column=1, sticky="ew", padx=4, pady=2)

btn_luu_sang_tab2 = tk.Button(
    frame_sang2,
    text="‚úÖ L∆∞u Ca G√£y S√°ng",
    font=default_font,
    bg="#f5faff",
    fg="#1976d2",
    activebackground="#e3eafc",
    activeforeground="#1976d2",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: (
        luu_cau_hinh(
            ten_nv_sang_tab2_var.get(),
            entry_gio_sang_tab2.get(),
            allowed_late_morning_staff_T12,
            listbox_gay_sang_tab2,
            "S√°ng",
        ),
        luu_du_lieu_ca_gay_T12(),
    ),
)
btn_luu_sang_tab2.grid(row=3, column=0, columnspan=2, pady=(5, 2), ipadx=4)


listbox_gay_sang_tab2 = tk.Listbox(
    frame_sang2,
    font=default_font,
    height=6,
    bg="#fafdff",
    bd=1,
    relief="solid",
    highlightthickness=1,
    highlightbackground="#e3eaf3",
)
listbox_gay_sang_tab2.grid(row=4, column=0, columnspan=2, sticky="nsew", padx=4, pady=2)


btn_xoa_sang_tab2 = tk.Button(
    frame_sang2,
    text="üóëÔ∏è X√≥a Ca G√£y S√°ng",
    font=default_font,
    bg="#f5faff",
    fg="#b71c1c",
    activebackground="#ffeaea",
    activeforeground="#b71c1c",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: xoa_cau_hinh(
        listbox_gay_sang_tab2, allowed_late_morning_staff_T12, "sang", "T12"
    ),
)
btn_xoa_sang_tab2.grid(row=5, column=0, columnspan=2, pady=5, ipadx=4)

frame_sang2.columnconfigure(1, weight=1)

# === Ca G√ÉY CHI·ªÄU TAB 2 ===

# Ca g√£y chi·ªÅu: khung s√°ng nh·∫π, border m·∫£nh
frame_chieu2 = tk.Frame(
    frame_ca_gay2,
    bg="#fdfcf7",
    bd=1,
    relief="solid",
    highlightbackground="#b3c6e0",
    highlightthickness=1,
)
frame_chieu2.grid(row=0, column=1, sticky="nsew", padx=6, pady=4)

tk.Label(
    frame_chieu2,
    text="Ca G√£y Chi·ªÅu:",
    font=("Segoe UI", 13, "bold"),
    bg="#fdfcf7",
    fg="#1976d2",
).grid(row=0, column=0, sticky="w", padx=4, pady=2)

tk.Label(
    frame_chieu2,
    text="üåá Nh√¢n vi√™n (VD: Nguyen Van A):",
    font=default_font,
    bg="#fdfcf7",
    fg="#222",
).grid(row=1, column=0, sticky="w", padx=4, pady=2)
# Combobox ch·ªçn t√™n nh√¢n vi√™n cho ca g√£y chi·ªÅu tab T12
ten_nv_chieu_tab2_var = tk.StringVar()
combobox_ten_nv_chieu_tab2 = ttk.Combobox(
    frame_chieu2,
    textvariable=ten_nv_chieu_tab2_var,
    font=default_font,
    state="readonly",
)
combobox_ten_nv_chieu_tab2.grid(row=1, column=1, sticky="ew", padx=4, pady=2)
combobox_ten_nv_chieu_tab2["values"] = []

tk.Label(
    frame_chieu2,
    text="Gi·ªù b·∫Øt ƒë·∫ßu (15:00, 16:00,...):",
    font=default_font,
    bg="#fdfcf7",
    fg="#222",
).grid(row=2, column=0, sticky="w", padx=4, pady=2)
entry_gio_chieu_tab2 = tk.Entry(
    frame_chieu2,
    font=default_font,
    bg="#ffffff",
    relief="solid",
    bd=1,
    highlightthickness=1,
    highlightbackground="#e0b3b3",
)
entry_gio_chieu_tab2.grid(row=2, column=1, sticky="ew", padx=4, pady=2)


btn_luu_chieu_tab2 = tk.Button(
    frame_chieu2,
    text="‚úÖ L∆∞u Ca G√£y Chi·ªÅu",
    font=default_font,
    bg="#f5faff",
    fg="#fbc02d",
    activebackground="#fffde7",
    activeforeground="#fbc02d",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: (
        luu_cau_hinh(
            ten_nv_chieu_tab2_var.get(),
            entry_gio_chieu_tab2.get(),
            allowed_late_evening_staff_T12,
            listbox_gay_chieu_tab2,
            "Chi·ªÅu",
        ),
        luu_du_lieu_ca_gay_T12(),
    ),
)
btn_luu_chieu_tab2.config(
    fg="#1976d2", activebackground="#e3eafc", activeforeground="#1976d2"
)
btn_luu_chieu_tab2.grid(row=3, column=0, columnspan=2, pady=(5, 2), ipadx=4)


listbox_gay_chieu_tab2 = tk.Listbox(
    frame_chieu2,
    font=default_font,
    height=6,
    bg="#fffdfa",
    bd=1,
    relief="solid",
    highlightthickness=1,
    highlightbackground="#f0e3e3",
)
listbox_gay_chieu_tab2.grid(
    row=4, column=0, columnspan=2, sticky="nsew", padx=4, pady=2
)


btn_xoa_chieu_tab2 = tk.Button(
    frame_chieu2,
    text="üóëÔ∏è X√≥a Ca G√£y Chi·ªÅu",
    font=default_font,
    bg="#f5faff",
    fg="#b71c1c",
    activebackground="#ffeaea",
    activeforeground="#b71c1c",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=lambda: xoa_cau_hinh(
        listbox_gay_chieu_tab2, allowed_late_evening_staff_T12, "chieu", "T12"
    ),
)
btn_xoa_chieu_tab2.grid(row=5, column=0, columnspan=2, pady=5, ipadx=4)

frame_chieu2.columnconfigure(1, weight=1)

# === KHUNG XU·∫§T FILE TAB 2 ===

# Khung xu·∫•t file r√µ r√†ng, border d·ªãu, padding r·ªông
frame_output2 = tk.LabelFrame(
    tab2,
    text="üíæ B∆∞·ªõc 3: Xu·∫•t File",
    font=title_font,
    bg="#fafdff",
    fg="#1a237e",
    bd=1,
    relief="groove",
    padx=14,
    pady=10,
    labelanchor="nw",
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
frame_output2.grid(row=3, column=0, columnspan=2, sticky="ew", padx=22, pady=8)
frame_output2.columnconfigure(1, weight=1)

# --- Status label for export (T12) ---
status_var_export_t12 = tk.StringVar()
status_label_export_t12 = tk.Label(
    frame_output2,
    textvariable=status_var_export_t12,
    font=("Segoe UI", 11),
    fg="#1976d2",
    bg="#fafdff",
)


tk.Label(
    frame_output2, text="T√™n file (.xlsx):", font=default_font, bg="#ffffff", fg="#222"
).grid(row=0, column=0, sticky="w", padx=5)


# --- Placeholder cho √¥ nh·∫≠p t√™n file (tab T12) ---
def set_placeholder_t12(event=None):
    if not entry_ten_file2.get():
        entry_ten_file2.insert(0, "Nh·∫≠p t√™n file xu·∫•t ra (.xlsx)")
        entry_ten_file2.config(fg="#888")


def clear_placeholder_t12(event=None):
    if entry_ten_file2.get() == "Nh·∫≠p t√™n file xu·∫•t ra (.xlsx)":
        entry_ten_file2.delete(0, tk.END)
        entry_ten_file2.config(fg="#222")


entry_ten_file2 = tk.Entry(
    frame_output2,
    font=default_font,
    width=40,
    state="normal",
    bg="#ffffff",
    relief="solid",
    bd=1,
    highlightthickness=1,
    highlightbackground="#b3c6e0",
)
entry_ten_file2.grid(row=0, column=1, padx=5, sticky="ew")
set_placeholder_t12()
entry_ten_file2.bind("<FocusIn>", clear_placeholder_t12)
entry_ten_file2.bind("<FocusOut>", set_placeholder_t12)


btn_chon_thu_muc2 = tk.Button(
    frame_output2,
    text="üíæ Ch·ªçn n∆°i l∆∞u file",
    font=default_font,
    bg="#f5faff",
    fg="#1a237e",
    activebackground="#e3eafc",
    activeforeground="#1a237e",
    state="disabled",
    relief="ridge",
    bd=1,
    cursor="hand2",
    command=chon_thu_muc_tab2,
)
btn_chon_thu_muc2.grid(row=1, column=0, pady=10, ipadx=4, sticky="w")
status_label_export_t12.grid(row=1, column=1, sticky="w", padx=(10, 0))


label_folder2 = tk.Label(
    frame_output2,
    text="Ch∆∞a ch·ªçn n∆°i l∆∞u",
    font=default_font,
    bg="#ffffff",
    fg="#b71c1c",
)
label_folder2.grid(row=2, column=0, columnspan=2)


nap_du_lieu_ca_gay()
cap_nhat_danh_sach(listbox_gay_sang_tab1, allowed_late_morning_staff)
cap_nhat_danh_sach(listbox_gay, allowed_late_evening_staff)

nap_du_lieu_ca_gay_T12()
cap_nhat_danh_sach(listbox_gay_sang_tab2, allowed_late_morning_staff_T12)
cap_nhat_danh_sach(listbox_gay_chieu_tab2, allowed_late_evening_staff_T12)
window.mainloop()
